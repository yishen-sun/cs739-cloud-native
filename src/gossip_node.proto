syntax = "proto3";

package gossipnode;

service GossipNodeService {
    rpc JoinNetwork (JoinRequest) returns (JoinResponse) {}
    rpc LeaveNetwork (LeaveRequest) returns (LeaveResponse) {}
    rpc Gossip (GossipRequest) returns (GossipResponse) {}
    rpc UpdateRing (UpdateRingRequest) returns (UpdateRingResponse) {}
    rpc ClientGet(GetRequest) returns (GetResponse) {}
    rpc ClientPut(PutRequest) returns (PutResponse) {}
    rpc PeerGet(PeerGetRequest) returns (PeerGetResponse) {}
    rpc PeerPut(PeerPutRequest) returns (PeerPutResponse) {}
}

message JoinRequest {
    string node_id = 1;
}

message JoinResponse {
    bool success = 1;
}

message LeaveRequest {
    string node_id = 1;
}

message LeaveResponse {
    bool success = 1;
}

message GossipRequest {
    repeated KeyTimePair member_list = 1;
}

message GossipResponse {
    bool success = 1;
}

message KeyTimePair {
    string key = 1;
    int64 time_point = 2;
}

message UpdateRingRequest {
    repeated KeyValuePair ring_data = 1;
}

message UpdateRingResponse {
    bool success = 1;
}

message KeyValuePair {
    string key = 1;
    string value = 2;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    repeated Data get_res_data = 1;
    string coordinator = 2;
}

message Data {
    string value = 1;
    repeated ServerVersion version_info = 2;
}

message ServerVersion {
    string server = 1;
    uint64 version = 2;
}

message PutRequest {
    string key = 1;
    Data data = 2;
}


enum PutReturn {
    OK = 0;
    FAILED = 1;
    NOT_COORDINATOR = 2;
    NO_VERSION = 3;
}

message PutResponse {
    PutReturn ret = 1;
    string coordinator = 2;
}

message PeerPutRequest {
    string key = 1;
    Data data = 2;
}

message PeerPutResponse {
    bool success = 1;
}

message PeerGetRequest {
    string key = 1;
}

message PeerGetResponse {
    Data data = 1;
}